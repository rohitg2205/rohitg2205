first fit 
************
#include <stdio.h>

#define MAX_BLOCKS 10

int main() {
    int blockSize[MAX_BLOCKS], processSize[MAX_BLOCKS];
    int m, n;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);

    printf("Enter the size of each memory block:\n");
    for (int i = 0; i < m; i++) {
        scanf("%d", &blockSize[i]);
    }

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the size of each process:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &processSize[i]);
    }

    // First-fit allocation
    for (int i = 0; i < n; i++) {
        int j;
        for (j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                printf("Process %d allocated to block %d\n", i + 1, j + 1);
                blockSize[j] -= processSize[i];
                break;
            }
        }
        if (j == m) {
            printf("Process %d cannot be allocated\n", i + 1);
        }
    }

    return 0;
}


worst fit
******************************
#include <stdio.h>

#define MAX_BLOCKS 10

int main() {
    int blockSize[MAX_BLOCKS], processSize[MAX_BLOCKS];
    int m, n;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);

    printf("Enter the size of each memory block:\n");
    for (int i = 0; i < m; i++) {
        scanf("%d", &blockSize[i]);
    }

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    printf("Enter the size of each process:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &processSize[i]);
    }

    // Worst-fit allocation
    for (int i = 0; i < n; i++) {
        int maxBlockSize = -1, maxBlockIndex = -1;
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i] && blockSize[j] > maxBlockSize) {
                maxBlockSize = blockSize[j];
                maxBlockIndex = j;
            }
        }
        if (maxBlockIndex != -1) {
            printf("Process %d allocated to block %d\n", i + 1, maxBlockIndex + 1);
            blockSize[maxBlockIndex] -= processSize[i];
        } else {
            printf("Process %d cannot be allocated\n", i + 1);
        }
    }

    return 0;
}
